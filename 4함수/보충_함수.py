# 1. 함수란?
# 하나의 특정 작업을 수행하기 위해 독립적으로 설계된 프로그램 코드의 집합을 말함

#-------------------------------------------------------------------------------
# 2. 함수를 사용하는 이유는?

# 큰 이유는 프로그램 내에서 중복적인 코드의 작성을 최소화하고,
# 코드의 재 사용성을 높여줌




#-------------------------------------------------------------------------------

# 3. 함수 선언하고 호출하기
    # 파이썬에서는 파이썬이 제공하는 내장 함수를 그대로 사용하는 것 뿐만 아니라
    # 자신만의 함수를 직접 만들어서 사용 할수도 있다.

# 3-1 함수 선언 문법
    # def 함수명 (매개변수1, ...):
    #   실행할 코드 1 ...

    # 설명 : 함수명은 함수를 호출할 때 사용하기 위한 이름이며,
    # 매개변수는 함수 호출시 전달되는 인수의 값을 함수 내부에서 사용할 수 있도록 저장할 변수의 이름이다.

# 3-2 선언된 함수 호출하기 문법
    # 함수명 (인수, ...)

    # 참고! 인수는 함수를 호출할때 함수 내부에서 사용할 데이터를 전달 해주는 역할을 함

# 예제 1. hello라는 이름의 함수를 선언하고 호출하는 예제
# 함수 선언

def hello():
    print("함수 시작")
    print("함수 시작")
    print("함수 시작")



hello()

# 예제 2. 두 개의 인수를 전달 받아 그 합을 출력하는 함수 만들기
# sum이라는 이름의 함수를 만들고 (선언하고)

def sum(a,b):
    print(a+b)

sum(1,2)
sum(3,4)


# 4. 값을 반환하는 함수
#   def 함수명(매개변수):
#   실행할 코드 1
#   실행할 코드 2

#   ...
#   return 결과값


# return 문을 사용하여 함수에서 반환된 값은 곧바로 변수에 대입하여 사용할 수 있다.
# 문법

# 변수명 = 함수명(인수)

def sum1(a,b):
    print("함수 시작")
    return a+b

a = sum1(1,2)
print(a)

print(sum1(2,3))

# 가변 매개변수로 딕셔너리를 사용하려면, 하나의 별 * 기호가 아닌 두개의 별 **기호를 사용하여 함수를 선언함

def print_map(**dicts):
    print(dicts)
    for item in dicts.items(): # items()함수는 key와 value의 쌍을 튜플로 묶은 값을 dict_items객체로 돌려줌
            print(item)
print_map(하나=1)
print_map(one=1, two=2)

def arith(a,b):
    add = a + b
    sub = a - b
    return add, sub
i,j = arith(10,1)

print(i)
print(j)

#-----------------------------------------------------------------------------------------------------------------------

# 람다 표현식의 개념

# 매개변수로 함수를 전달하기 위해 함수 구문을 작성하는 것도 번거롭게, 코드의 공간 낭비라는 생각을 하여
# 많은 개발자들이 간단한 함수를 쉽게 선언 하는 방법의 식을 만들었는데 이런식을 람다 표현식이라고 부른다.

# 람다(간단한 함수를 쉽게 선언후 호출하는 방법) 문법
# (lambda 매개변수 : 리턴값) (인수1, 인수2)

# 예제 함수의 선언과 호출 과정
def add(a,b):
    return a+b

add(1,2)

def test():
    return "테스트"
print(add(1,2))

# 이처럼 람다는 단 한번만 사용할 함수를 간단하게 선언하고 호출할 때 매우 유용하게 사용할 수 있다.

print("람다표현함수 (익명 함수같은디) ", (lambda a,b : a+b) (1,2))

# 람다를 이용해 매개변수가 없는 함수를 정의하고 호출하여 "안녕" 이라는 구문이 출력되도록 작성

print("람다 매개변수 없이 ----> ", (lambda : "안녕!!!!!!!!!!!")() )

(lambda : print("안녕2"))  () # 아 이게 이렇게도 되넹







